package dp;

/**
 * @Author Baker.chen
 * @create 2020/8/20 11:30
 *
 * 除数博弈
 *  爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局
 *  最初，黑板上有一个数字N。在每个玩家的回合，玩家需要执行以下操作：
 *  选出任一x，满足 0 < x < N 且 N % x == 0 
 *  用 N - x 替换黑板上的数字 N
 *  如果玩家无法执行这些操作，就会输掉游戏
 *  只有在爱丽丝在游戏中取得胜利时才返回True，否则返回False
 *  假设两个玩家都以最佳状态参与游戏
 *
 *  示例1：
 *     输入：2
 *     输出：true
 *     解释：爱丽丝选择 1，鲍勃无法进行操作
 *  示例2：
 *     输入：3
 *     输出：false
 *     解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。
 *
 * 思路：通过多个例子可以归纳出当N为偶数时，爱丽丝获胜；当N为奇数时，爱丽丝失败
 *  这使用的是归纳法，动态规划实现这道题有点难理解~，这里不做展开~
 */
public class 除数博弈 {

    public static boolean test(int N) {
        return N % 2 == 0 ? true : false;
    }
}
